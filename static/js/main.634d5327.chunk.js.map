{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Banner","props","class","src","logo","onClick","window","location","href","images","Name","this","name","React","Component","Description","text","Text","Images","imageCards","map","imageName","className","id","Footer","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,4MCIrCC,G,MAAS,SAACC,GACZ,OACI,oCACI,yBAAKC,MAAM,UACP,yBACIC,IAAKC,IACLC,QACI,WACIC,OAAOC,SAASC,KAAO,+CAInC,yBAAKN,MAAM,SACP,2CACA,oCACA,uBAAGA,MAAM,gBAAT,gBAOhBO,EAAS,CAAC,SAAU,WAAY,OAAQ,YAEtCC,E,YACJ,WAAYT,GAAQ,qEAAMA,I,sEAGxB,OACI,yBAAKC,MAAM,WACRS,KAAKV,MAAMW,U,GANHC,IAAMC,WAYnBC,EAAc,SAACd,GACjB,OACI,yBAAKC,MAAM,eACND,EAAMe,OAKbC,E,YACJ,WAAYhB,GAAQ,qEACZA,I,sEAIN,OACI,yBAAKC,MAAM,YACP,yBAAKA,MAAM,QACP,4BAAQA,MAAM,eAAd,MACO,kBAAC,EAAD,CAAMU,KAAK,eAElB,kBAAC,EAAD,CAAaI,KAAK,2H,GAZfH,IAAMC,WAmBnBI,E,YACJ,WAAYjB,GAAQ,qEACZA,I,sEAIJ,IAAIkB,EAAaV,EAAOW,KAAI,SAAAC,GACxB,OACI,yBAAKC,UAAU,aAAaC,GAAIF,GAC3BA,MAKb,OACE,yBAAKnB,MAAM,UACNiB,O,GAhBQN,IAAMC,WA4BrBU,EAAS,SAACvB,GACZ,OACE,gCACE,mDACE,yBAAKC,MAAM,WAAX,iBAmBKuB,MAdf,WACE,OACE,oCACI,kBAAC,EAAD,MACA,8BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGJ,kBAAC,EAAD,QCrGYC,QACW,cAA7BpB,OAAOC,SAASoB,UAEe,UAA7BrB,OAAOC,SAASoB,UAEhBrB,OAAOC,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.634d5327.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a7296f1b.png\";","import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\n\nconst Banner = (props) => {\n    return(\n        <>\n            <div class=\"banner\">\n                <img\n                    src={logo}\n                    onClick={\n                        function() {\n                            window.location.href = 'https://theuncleofalex.github.io/about-me';\n                        }\n                    }\n                />\n                <div class=\"links\">\n                    <a>Achievements</a>\n                    <a>About</a>\n                    <a class=\"primary-link\">Contact</a>\n                </div>\n            </div>\n        </>\n    );\n}\n\nlet images = [\"myself\", \"Hangouts\", \"scio\", \"robotics\"];\n\nclass Name extends React.Component {\n  constructor(props) {super(props);}\n\n  render() {\n    return (\n        <div class=\"my-name\">\n          {this.props.name}\n        </div>\n    )\n  }\n}\n\nconst Description = (props) => {\n    return(\n        <div class=\"description\">\n            {props.text}\n        </div>\n    );\n}\n\nclass Text extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n        <div class=\"text-con\">\n            <div class=\"text\">\n                <header class=\"main-header\">\n                    I'm<Name name=\"Alex Yang\"/>\n                </header>\n                <Description text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis at nulla massa. Maecenas finibus vehicula aliquet.\"/>\n            </div>\n        </div>\n    )\n  }\n}\n\nclass Images extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n      let imageCards = images.map(imageName => {\n          return(\n              <div className=\"pseudo-img\" id={imageName}>\n                  {imageName}\n              </div>\n          )\n      });\n\n      return (\n        <div class=\"images\">\n            {imageCards}\n        </div>\n    )\n  }\n}\n\n// function ScrollButton = (props) => {\n//     return(\n//       <a href=\"#section02\"></a>\n//     );\n// }\n\nconst Footer = (props) => {\n    return(\n      <footer>\n        <h1>Let's Get In Touch!</h1>\n          <div class=\"contact\">Contact me!</div>\n      </footer>\n    );\n}\n\nfunction App() {\n  return (\n    <>\n        <Banner/>\n        <main>\n            <Images/>\n            <Text/>\n            {/*<ScrollButton/>*/}\n        </main>\n        <Footer/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}